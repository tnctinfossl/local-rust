// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `grSim_Packet.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct grSim_Packet {
    // message fields
    commands: ::protobuf::SingularPtrField<super::grSim_Commands::grSim_Commands>,
    replacement: ::protobuf::SingularPtrField<super::grSim_Replacement::grSim_Replacement>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a grSim_Packet {
    fn default() -> &'a grSim_Packet {
        <grSim_Packet as ::protobuf::Message>::default_instance()
    }
}

impl grSim_Packet {
    pub fn new() -> grSim_Packet {
        ::std::default::Default::default()
    }

    // optional .grSim_Commands commands = 1;


    pub fn get_commands(&self) -> &super::grSim_Commands::grSim_Commands {
        self.commands.as_ref().unwrap_or_else(|| super::grSim_Commands::grSim_Commands::default_instance())
    }
    pub fn clear_commands(&mut self) {
        self.commands.clear();
    }

    pub fn has_commands(&self) -> bool {
        self.commands.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commands(&mut self, v: super::grSim_Commands::grSim_Commands) {
        self.commands = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commands(&mut self) -> &mut super::grSim_Commands::grSim_Commands {
        if self.commands.is_none() {
            self.commands.set_default();
        }
        self.commands.as_mut().unwrap()
    }

    // Take field
    pub fn take_commands(&mut self) -> super::grSim_Commands::grSim_Commands {
        self.commands.take().unwrap_or_else(|| super::grSim_Commands::grSim_Commands::new())
    }

    // optional .grSim_Replacement replacement = 2;


    pub fn get_replacement(&self) -> &super::grSim_Replacement::grSim_Replacement {
        self.replacement.as_ref().unwrap_or_else(|| super::grSim_Replacement::grSim_Replacement::default_instance())
    }
    pub fn clear_replacement(&mut self) {
        self.replacement.clear();
    }

    pub fn has_replacement(&self) -> bool {
        self.replacement.is_some()
    }

    // Param is passed by value, moved
    pub fn set_replacement(&mut self, v: super::grSim_Replacement::grSim_Replacement) {
        self.replacement = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_replacement(&mut self) -> &mut super::grSim_Replacement::grSim_Replacement {
        if self.replacement.is_none() {
            self.replacement.set_default();
        }
        self.replacement.as_mut().unwrap()
    }

    // Take field
    pub fn take_replacement(&mut self) -> super::grSim_Replacement::grSim_Replacement {
        self.replacement.take().unwrap_or_else(|| super::grSim_Replacement::grSim_Replacement::new())
    }
}

impl ::protobuf::Message for grSim_Packet {
    fn is_initialized(&self) -> bool {
        for v in &self.commands {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.replacement {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.commands)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.replacement)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.commands.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.replacement.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.commands.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.replacement.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> grSim_Packet {
        grSim_Packet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::grSim_Commands::grSim_Commands>>(
                    "commands",
                    |m: &grSim_Packet| { &m.commands },
                    |m: &mut grSim_Packet| { &mut m.commands },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::grSim_Replacement::grSim_Replacement>>(
                    "replacement",
                    |m: &grSim_Packet| { &m.replacement },
                    |m: &mut grSim_Packet| { &mut m.replacement },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<grSim_Packet>(
                    "grSim_Packet",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static grSim_Packet {
        static mut instance: ::protobuf::lazy::Lazy<grSim_Packet> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const grSim_Packet,
        };
        unsafe {
            instance.get(grSim_Packet::new)
        }
    }
}

impl ::protobuf::Clear for grSim_Packet {
    fn clear(&mut self) {
        self.commands.clear();
        self.replacement.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for grSim_Packet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for grSim_Packet {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12grSim_Packet.proto\x1a\x14grSim_Commands.proto\x1a\x17grSim_Replac\
    ement.proto\"q\n\x0cgrSim_Packet\x12+\n\x08commands\x18\x01\x20\x01(\x0b\
    2\x0f.grSim_CommandsR\x08commands\x124\n\x0breplacement\x18\x02\x20\x01(\
    \x0b2\x12.grSim_ReplacementR\x0breplacement\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
