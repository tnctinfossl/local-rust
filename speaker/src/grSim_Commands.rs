// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `grSim_Commands.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct grSim_Robot_Command {
    // message fields
    id: ::std::option::Option<u32>,
    kickspeedx: ::std::option::Option<f32>,
    kickspeedz: ::std::option::Option<f32>,
    veltangent: ::std::option::Option<f32>,
    velnormal: ::std::option::Option<f32>,
    velangular: ::std::option::Option<f32>,
    spinner: ::std::option::Option<bool>,
    wheelsspeed: ::std::option::Option<bool>,
    wheel1: ::std::option::Option<f32>,
    wheel2: ::std::option::Option<f32>,
    wheel3: ::std::option::Option<f32>,
    wheel4: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a grSim_Robot_Command {
    fn default() -> &'a grSim_Robot_Command {
        <grSim_Robot_Command as ::protobuf::Message>::default_instance()
    }
}

impl grSim_Robot_Command {
    pub fn new() -> grSim_Robot_Command {
        ::std::default::Default::default()
    }

    // required uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id.unwrap_or(0)
    }
    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    // required float kickspeedx = 2;


    pub fn get_kickspeedx(&self) -> f32 {
        self.kickspeedx.unwrap_or(0.)
    }
    pub fn clear_kickspeedx(&mut self) {
        self.kickspeedx = ::std::option::Option::None;
    }

    pub fn has_kickspeedx(&self) -> bool {
        self.kickspeedx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kickspeedx(&mut self, v: f32) {
        self.kickspeedx = ::std::option::Option::Some(v);
    }

    // required float kickspeedz = 3;


    pub fn get_kickspeedz(&self) -> f32 {
        self.kickspeedz.unwrap_or(0.)
    }
    pub fn clear_kickspeedz(&mut self) {
        self.kickspeedz = ::std::option::Option::None;
    }

    pub fn has_kickspeedz(&self) -> bool {
        self.kickspeedz.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kickspeedz(&mut self, v: f32) {
        self.kickspeedz = ::std::option::Option::Some(v);
    }

    // required float veltangent = 4;


    pub fn get_veltangent(&self) -> f32 {
        self.veltangent.unwrap_or(0.)
    }
    pub fn clear_veltangent(&mut self) {
        self.veltangent = ::std::option::Option::None;
    }

    pub fn has_veltangent(&self) -> bool {
        self.veltangent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_veltangent(&mut self, v: f32) {
        self.veltangent = ::std::option::Option::Some(v);
    }

    // required float velnormal = 5;


    pub fn get_velnormal(&self) -> f32 {
        self.velnormal.unwrap_or(0.)
    }
    pub fn clear_velnormal(&mut self) {
        self.velnormal = ::std::option::Option::None;
    }

    pub fn has_velnormal(&self) -> bool {
        self.velnormal.is_some()
    }

    // Param is passed by value, moved
    pub fn set_velnormal(&mut self, v: f32) {
        self.velnormal = ::std::option::Option::Some(v);
    }

    // required float velangular = 6;


    pub fn get_velangular(&self) -> f32 {
        self.velangular.unwrap_or(0.)
    }
    pub fn clear_velangular(&mut self) {
        self.velangular = ::std::option::Option::None;
    }

    pub fn has_velangular(&self) -> bool {
        self.velangular.is_some()
    }

    // Param is passed by value, moved
    pub fn set_velangular(&mut self, v: f32) {
        self.velangular = ::std::option::Option::Some(v);
    }

    // required bool spinner = 7;


    pub fn get_spinner(&self) -> bool {
        self.spinner.unwrap_or(false)
    }
    pub fn clear_spinner(&mut self) {
        self.spinner = ::std::option::Option::None;
    }

    pub fn has_spinner(&self) -> bool {
        self.spinner.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spinner(&mut self, v: bool) {
        self.spinner = ::std::option::Option::Some(v);
    }

    // required bool wheelsspeed = 8;


    pub fn get_wheelsspeed(&self) -> bool {
        self.wheelsspeed.unwrap_or(false)
    }
    pub fn clear_wheelsspeed(&mut self) {
        self.wheelsspeed = ::std::option::Option::None;
    }

    pub fn has_wheelsspeed(&self) -> bool {
        self.wheelsspeed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wheelsspeed(&mut self, v: bool) {
        self.wheelsspeed = ::std::option::Option::Some(v);
    }

    // optional float wheel1 = 9;


    pub fn get_wheel1(&self) -> f32 {
        self.wheel1.unwrap_or(0.)
    }
    pub fn clear_wheel1(&mut self) {
        self.wheel1 = ::std::option::Option::None;
    }

    pub fn has_wheel1(&self) -> bool {
        self.wheel1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wheel1(&mut self, v: f32) {
        self.wheel1 = ::std::option::Option::Some(v);
    }

    // optional float wheel2 = 10;


    pub fn get_wheel2(&self) -> f32 {
        self.wheel2.unwrap_or(0.)
    }
    pub fn clear_wheel2(&mut self) {
        self.wheel2 = ::std::option::Option::None;
    }

    pub fn has_wheel2(&self) -> bool {
        self.wheel2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wheel2(&mut self, v: f32) {
        self.wheel2 = ::std::option::Option::Some(v);
    }

    // optional float wheel3 = 11;


    pub fn get_wheel3(&self) -> f32 {
        self.wheel3.unwrap_or(0.)
    }
    pub fn clear_wheel3(&mut self) {
        self.wheel3 = ::std::option::Option::None;
    }

    pub fn has_wheel3(&self) -> bool {
        self.wheel3.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wheel3(&mut self, v: f32) {
        self.wheel3 = ::std::option::Option::Some(v);
    }

    // optional float wheel4 = 12;


    pub fn get_wheel4(&self) -> f32 {
        self.wheel4.unwrap_or(0.)
    }
    pub fn clear_wheel4(&mut self) {
        self.wheel4 = ::std::option::Option::None;
    }

    pub fn has_wheel4(&self) -> bool {
        self.wheel4.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wheel4(&mut self, v: f32) {
        self.wheel4 = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for grSim_Robot_Command {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        if self.kickspeedx.is_none() {
            return false;
        }
        if self.kickspeedz.is_none() {
            return false;
        }
        if self.veltangent.is_none() {
            return false;
        }
        if self.velnormal.is_none() {
            return false;
        }
        if self.velangular.is_none() {
            return false;
        }
        if self.spinner.is_none() {
            return false;
        }
        if self.wheelsspeed.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.kickspeedx = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.kickspeedz = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.veltangent = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.velnormal = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.velangular = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.spinner = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.wheelsspeed = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.wheel1 = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.wheel2 = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.wheel3 = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.wheel4 = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.kickspeedx {
            my_size += 5;
        }
        if let Some(v) = self.kickspeedz {
            my_size += 5;
        }
        if let Some(v) = self.veltangent {
            my_size += 5;
        }
        if let Some(v) = self.velnormal {
            my_size += 5;
        }
        if let Some(v) = self.velangular {
            my_size += 5;
        }
        if let Some(v) = self.spinner {
            my_size += 2;
        }
        if let Some(v) = self.wheelsspeed {
            my_size += 2;
        }
        if let Some(v) = self.wheel1 {
            my_size += 5;
        }
        if let Some(v) = self.wheel2 {
            my_size += 5;
        }
        if let Some(v) = self.wheel3 {
            my_size += 5;
        }
        if let Some(v) = self.wheel4 {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.kickspeedx {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.kickspeedz {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.veltangent {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.velnormal {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.velangular {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.spinner {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.wheelsspeed {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.wheel1 {
            os.write_float(9, v)?;
        }
        if let Some(v) = self.wheel2 {
            os.write_float(10, v)?;
        }
        if let Some(v) = self.wheel3 {
            os.write_float(11, v)?;
        }
        if let Some(v) = self.wheel4 {
            os.write_float(12, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> grSim_Robot_Command {
        grSim_Robot_Command::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "id",
                    |m: &grSim_Robot_Command| { &m.id },
                    |m: &mut grSim_Robot_Command| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "kickspeedx",
                    |m: &grSim_Robot_Command| { &m.kickspeedx },
                    |m: &mut grSim_Robot_Command| { &mut m.kickspeedx },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "kickspeedz",
                    |m: &grSim_Robot_Command| { &m.kickspeedz },
                    |m: &mut grSim_Robot_Command| { &mut m.kickspeedz },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "veltangent",
                    |m: &grSim_Robot_Command| { &m.veltangent },
                    |m: &mut grSim_Robot_Command| { &mut m.veltangent },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "velnormal",
                    |m: &grSim_Robot_Command| { &m.velnormal },
                    |m: &mut grSim_Robot_Command| { &mut m.velnormal },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "velangular",
                    |m: &grSim_Robot_Command| { &m.velangular },
                    |m: &mut grSim_Robot_Command| { &mut m.velangular },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "spinner",
                    |m: &grSim_Robot_Command| { &m.spinner },
                    |m: &mut grSim_Robot_Command| { &mut m.spinner },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "wheelsspeed",
                    |m: &grSim_Robot_Command| { &m.wheelsspeed },
                    |m: &mut grSim_Robot_Command| { &mut m.wheelsspeed },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "wheel1",
                    |m: &grSim_Robot_Command| { &m.wheel1 },
                    |m: &mut grSim_Robot_Command| { &mut m.wheel1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "wheel2",
                    |m: &grSim_Robot_Command| { &m.wheel2 },
                    |m: &mut grSim_Robot_Command| { &mut m.wheel2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "wheel3",
                    |m: &grSim_Robot_Command| { &m.wheel3 },
                    |m: &mut grSim_Robot_Command| { &mut m.wheel3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "wheel4",
                    |m: &grSim_Robot_Command| { &m.wheel4 },
                    |m: &mut grSim_Robot_Command| { &mut m.wheel4 },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<grSim_Robot_Command>(
                    "grSim_Robot_Command",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static grSim_Robot_Command {
        static mut instance: ::protobuf::lazy::Lazy<grSim_Robot_Command> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const grSim_Robot_Command,
        };
        unsafe {
            instance.get(grSim_Robot_Command::new)
        }
    }
}

impl ::protobuf::Clear for grSim_Robot_Command {
    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.kickspeedx = ::std::option::Option::None;
        self.kickspeedz = ::std::option::Option::None;
        self.veltangent = ::std::option::Option::None;
        self.velnormal = ::std::option::Option::None;
        self.velangular = ::std::option::Option::None;
        self.spinner = ::std::option::Option::None;
        self.wheelsspeed = ::std::option::Option::None;
        self.wheel1 = ::std::option::Option::None;
        self.wheel2 = ::std::option::Option::None;
        self.wheel3 = ::std::option::Option::None;
        self.wheel4 = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for grSim_Robot_Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for grSim_Robot_Command {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct grSim_Commands {
    // message fields
    timestamp: ::std::option::Option<f64>,
    isteamyellow: ::std::option::Option<bool>,
    robot_commands: ::protobuf::RepeatedField<grSim_Robot_Command>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a grSim_Commands {
    fn default() -> &'a grSim_Commands {
        <grSim_Commands as ::protobuf::Message>::default_instance()
    }
}

impl grSim_Commands {
    pub fn new() -> grSim_Commands {
        ::std::default::Default::default()
    }

    // required double timestamp = 1;


    pub fn get_timestamp(&self) -> f64 {
        self.timestamp.unwrap_or(0.)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: f64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // required bool isteamyellow = 2;


    pub fn get_isteamyellow(&self) -> bool {
        self.isteamyellow.unwrap_or(false)
    }
    pub fn clear_isteamyellow(&mut self) {
        self.isteamyellow = ::std::option::Option::None;
    }

    pub fn has_isteamyellow(&self) -> bool {
        self.isteamyellow.is_some()
    }

    // Param is passed by value, moved
    pub fn set_isteamyellow(&mut self, v: bool) {
        self.isteamyellow = ::std::option::Option::Some(v);
    }

    // repeated .grSim_Robot_Command robot_commands = 3;


    pub fn get_robot_commands(&self) -> &[grSim_Robot_Command] {
        &self.robot_commands
    }
    pub fn clear_robot_commands(&mut self) {
        self.robot_commands.clear();
    }

    // Param is passed by value, moved
    pub fn set_robot_commands(&mut self, v: ::protobuf::RepeatedField<grSim_Robot_Command>) {
        self.robot_commands = v;
    }

    // Mutable pointer to the field.
    pub fn mut_robot_commands(&mut self) -> &mut ::protobuf::RepeatedField<grSim_Robot_Command> {
        &mut self.robot_commands
    }

    // Take field
    pub fn take_robot_commands(&mut self) -> ::protobuf::RepeatedField<grSim_Robot_Command> {
        ::std::mem::replace(&mut self.robot_commands, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for grSim_Commands {
    fn is_initialized(&self) -> bool {
        if self.timestamp.is_none() {
            return false;
        }
        if self.isteamyellow.is_none() {
            return false;
        }
        for v in &self.robot_commands {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isteamyellow = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.robot_commands)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp {
            my_size += 9;
        }
        if let Some(v) = self.isteamyellow {
            my_size += 2;
        }
        for value in &self.robot_commands {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.timestamp {
            os.write_double(1, v)?;
        }
        if let Some(v) = self.isteamyellow {
            os.write_bool(2, v)?;
        }
        for v in &self.robot_commands {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> grSim_Commands {
        grSim_Commands::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "timestamp",
                    |m: &grSim_Commands| { &m.timestamp },
                    |m: &mut grSim_Commands| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isteamyellow",
                    |m: &grSim_Commands| { &m.isteamyellow },
                    |m: &mut grSim_Commands| { &mut m.isteamyellow },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<grSim_Robot_Command>>(
                    "robot_commands",
                    |m: &grSim_Commands| { &m.robot_commands },
                    |m: &mut grSim_Commands| { &mut m.robot_commands },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<grSim_Commands>(
                    "grSim_Commands",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static grSim_Commands {
        static mut instance: ::protobuf::lazy::Lazy<grSim_Commands> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const grSim_Commands,
        };
        unsafe {
            instance.get(grSim_Commands::new)
        }
    }
}

impl ::protobuf::Clear for grSim_Commands {
    fn clear(&mut self) {
        self.timestamp = ::std::option::Option::None;
        self.isteamyellow = ::std::option::Option::None;
        self.robot_commands.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for grSim_Commands {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for grSim_Commands {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14grSim_Commands.proto\"\xdf\x02\n\x13grSim_Robot_Command\x12\x0e\n\
    \x02id\x18\x01\x20\x02(\rR\x02id\x12\x1e\n\nkickspeedx\x18\x02\x20\x02(\
    \x02R\nkickspeedx\x12\x1e\n\nkickspeedz\x18\x03\x20\x02(\x02R\nkickspeed\
    z\x12\x1e\n\nveltangent\x18\x04\x20\x02(\x02R\nveltangent\x12\x1c\n\tvel\
    normal\x18\x05\x20\x02(\x02R\tvelnormal\x12\x1e\n\nvelangular\x18\x06\
    \x20\x02(\x02R\nvelangular\x12\x18\n\x07spinner\x18\x07\x20\x02(\x08R\
    \x07spinner\x12\x20\n\x0bwheelsspeed\x18\x08\x20\x02(\x08R\x0bwheelsspee\
    d\x12\x16\n\x06wheel1\x18\t\x20\x01(\x02R\x06wheel1\x12\x16\n\x06wheel2\
    \x18\n\x20\x01(\x02R\x06wheel2\x12\x16\n\x06wheel3\x18\x0b\x20\x01(\x02R\
    \x06wheel3\x12\x16\n\x06wheel4\x18\x0c\x20\x01(\x02R\x06wheel4\"\x8f\x01\
    \n\x0egrSim_Commands\x12\x1c\n\ttimestamp\x18\x01\x20\x02(\x01R\ttimesta\
    mp\x12\"\n\x0cisteamyellow\x18\x02\x20\x02(\x08R\x0cisteamyellow\x12;\n\
    \x0erobot_commands\x18\x03\x20\x03(\x0b2\x14.grSim_Robot_CommandR\rrobot\
    Commands\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
